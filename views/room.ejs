<!DOCTYPE html>
<html>

<head>


  <title>Socket.IO chat</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
    integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">
  <script defer src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
    integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
    integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
    crossorigin="anonymous"></script>
    
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
  <script src="https://kit.fontawesome.com/c939d0e917.js"></script>
  <style>
    li {
      color: white;
    }

    .main {
      height: 100vh;
      display: flex;
    }

    .main__left {
      flex: 0.8;
      display: flex;
      flex-direction: column;
    }

    .main__right {
      flex: 0.2
    }

    .main__videos {
      overflow-y: auto;
      flex-grow: 1;
      background-color: black;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 40px;
    }

    .main__controls {
      background-color: #1C1E20;
    }

    .main__right {
      background-color: #242324;
      border-left: 1px solid #3D3D42;
    }

    .main__controls {
      color: #D2D2D2;
      display: flex;
      justify-content: space-between;
      padding: 5px;
    }

    .main__controls__block {
      display: flex;
    }

    .main__controls__button {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      padding: 8px 10px;
      min-width: 80px;
      cursor: pointer;
    }

    .main__controls__button:hover {
      background-color: #343434;
      border-radius: 5px;
    }

    .main__controls__button i {
      font-size: 24px;
    }

    .main__right {
      display: flex;
      flex-direction: column;
    }

    .main__header {
      padding-top: 5px;
      color: #F5F5F5;
      text-align: center;
    }

    .main__chat_window {
      flex-grow: 1;
      overflow-y: auto;
    }

    .messages {
      color: white;
      list-style: none;
    }

    .main__message_container {
      padding: 22px 12px;
      display: flex;
    }

    .main__message_container input {
      flex-grow: 1;
      background-color: transparent;
      border: none;
      color: #F5F5F5;
    }

    .leave_meeting {
      color: #EB534B;
    }

    .unmute,
    .stop {
      color: #CC3B33;
    }

    #video-grid {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;

    }

    video {
      height: 300px;
      width: 400px;
      object-fit: cover;
      padding: 8px;
    }

    body,
    html {
      height: 100%;
    }

    main {
      height: 100%;
    }
  </style>
  <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
</head>

<body>

  <div class="main">
    <div class="main__left">
      <div class="main__videos">
        <div id="video-grid">

        </div>
      </div>
      <div class="main__controls">
        <div class="main__controls__block">
          <div onclick="muteUnmute()" class="main__controls__button main__mute_button">
            <i class="fas fa-microphone"></i>
            <span>Mute</span>
          </div>
          <div onclick="playStop()" class="main__controls__button main__video_button">
            <i class="fas fa-video"></i>
            <span>Stop Video</span>
          </div>
        </div>
        <div class="main__controls__block">
          <div class="main__controls__button">
            <a href="/home"><span class="leave_meeting">Leave Meeting</span></a>
          </div>
        </div>
      </div>

    </div>
    <div class="main__right">
      <div class="main__header">
        <h6 style="font-size: 24px;">Chat</h6>
      </div>
      <div class="main__chat_window">
        <ul id="messages"></ul>

      </div>
      <div class="main__message_container">
        <form id="form" action="">
          <input id="input" type="text" placeholder="Type message here..." color: green;>
        </form>
      </div>
    </div>
  </div>

















  <script src="/socket.io/socket.io.js"></script>
  
  <script>

    
    var ROOMID = '<%= roomId %>';
    var socket = io.connect();


    const videoGrid = document.getElementById('video-grid');
    var peer = new Peer(undefined, {
      port: '443'
    }
    );

    let myVideoStream
    const myVideo = document.createElement('video');
    myVideo.muted = true;
    const peers = {}

    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {
      myVideoStream = stream;
      addVideoStream(myVideo, stream);




      peer.on('call', call => {
        call.answer(stream)
        const video = document.createElement('video')
        call.on('stream', userVideoStream => {
          addVideoStream(video, userVideoStream)
        })
        call.on('close', () => {
          video.remove()
          var delayInMilliseconds = 100; //1 second
          setTimeout(function () {
            //your code to be executed after 1 second
            location.reload();
          }, delayInMilliseconds);
        })

      })
      var room = 'user-connected' + ROOMID;
      socket.on(room, userId => {

        connecToNewUser(userId, stream);
      }
      )
    })

    var roomclose = 'user-disconnected' + ROOMID;
    socket.on(roomclose, userId => {
      if (peers[userId]) {
        console.log("1")
        peers[userId].close()
        //1 second
      
          //your code to be executed after 1 second
          location.reload();
       

      }
    })

    peer.on('open', id => {
      console.log(peer);
      console.log("2");
      socket.emit('join-room', ROOMID, id);
      console.log(ROOMID + " , " + id)
    })
    function connecToNewUser(userId, stream) {
      const call = peer.call(userId, stream)
      const video = document.createElement('video')
      call.on('stream', userVideoStream => {
        console.log(3);
        addVideoStream(video, userVideoStream)
      })
      peers[userId] = call;

    }


    function addVideoStream(video, stream) {
      video.srcObject = stream;
      video.addEventListener('loadedmetadata', () => {
        video.play();
      })
      videoGrid.append(video);

    }



    // about messaging
    var messages = document.getElementById('messages');
    var form = document.getElementById('form');
    var input = document.getElementById('input');



    form.addEventListener('submit', function (e) {
      e.preventDefault();

      if (input.value) {
        var msg = input.value;
        var userName = '<%= userName %>'
        socket.emit('server', msg, ROOMID, userName);
        input.value = '';
      }
    });



    var room = 'chat message' + ROOMID;
    socket.on(room, (msg, username) => {
      //date
      var time = new Date();
      var minute = time.getMinutes();
      console.log(minute);
      console.log(minute);
      if(minute<10){
        var n = minute.toString();
        n = "0" + n;
        minute = n;
      }
 
      console.log(minute);
      var date = time.getHours() + '.' + minute + ':';
      console.log(date);
      var item = document.createElement('li');
      var myname = username;
      console.log(msg);
      var message = ''
      
      message += myname + " " + date + " " + "\n";
      msg = addNewlines(msg);
      message += msg;
      console.log(message)
      item.textContent = message;
      messages.appendChild(item);
      scrollToBottom();

    });
    const muteUnmute = () => {
      const enabled = myVideoStream.getAudioTracks()[0].enabled;
      if (enabled) {
        myVideoStream.getAudioTracks()[0].enabled = false;
        setUnmuteButton();
      } else {
        setMuteButton();
        myVideoStream.getAudioTracks()[0].enabled = true;
      }
    }
    const scrollToBottom = () => {
      var d = $('.main__chat_window');
      d.scrollTop(d.prop("scrollHeight"));
    }
    function addNewlines(str) {
  var result = '';
  while (str.length > 0) {
    result += str.substring(0, 35) + '\n';
    str = str.substring(35);
  }
  return result;
}

    const playStop = () => {
    
      let enabled = myVideoStream.getVideoTracks()[0].enabled;
      if (enabled) {
        myVideoStream.getVideoTracks()[0].enabled = false;
        setPlayVideo()
      } else {
        setStopVideo()
        myVideoStream.getVideoTracks()[0].enabled = true;
      }
    }
    const setMuteButton = () => {
      const html = `
    <i class="fas fa-microphone"></i>
    <span>Mute</span>
  `
      document.querySelector('.main__mute_button').innerHTML = html;
    }
    const setUnmuteButton = () => {
      const html = `
    <i class="unmute fas fa-microphone-slash"></i>
    <span>Unmute</span>
  `
      document.querySelector('.main__mute_button').innerHTML = html;
    }
    const setStopVideo = () => {
      const html = `
    <i class="fas fa-video"></i>
    <span>Stop Video</span>
  `
      document.querySelector('.main__video_button').innerHTML = html;
    }
    const setPlayVideo = () => {
      const html = `
  <i class="stop fas fa-video-slash"></i>
    <span>Play Video</span>
  `
      document.querySelector('.main__video_button').innerHTML = html;
    }
  </script>
</body>

</html>